const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');

const app = express();
const server = http.createServer(app);

// CORS –¥–ª—è React Native
app.use(cors({
    origin: "*",
    methods: ["GET", "POST", "OPTIONS"],
    credentials: true
}));

// Health check
app.get('/health', (req, res) => {
    res.json({
        status: 'OK',
        message: 'Ubuntu Socket.IO Server with Video Calls',
        port: 3000,
        timestamp: new Date().toISOString(),
        features: ['chat', 'video_calls', 'manual_clear']
    });
});

const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    },
    transports: ['polling', 'websocket']
});

console.log('üöÄ Ubuntu Socket.IO Server —Å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞–º–∏ –∑–∞–ø—É—â–µ–Ω');

let messages = [];
let connectedUsers = new Map();

io.on('connection', (socket) => {
    console.log('‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);

    const userId = 'user_' + Date.now();
    const userName = `User${userId.substr(5, 3)}`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    connectedUsers.set(socket.id, {
        id: userId,
        name: userName,
        socketId: socket.id,
        connectedAt: new Date()
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    socket.broadcast.emit('user_connected', {
        userId: userId,
        userName: userName,
        connectedUsers: Array.from(connectedUsers.values())
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    socket.emit('message_history', {
        messages: messages,
        connectedUsers: Array.from(connectedUsers.values())
    });

    // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ß–ê–¢–ê ====================

    socket.on('chat_message', (data) => {
        console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç', userName, ':', data.text);

        const newMessage = {
            id: Date.now().toString(),
            text: data.text,
            timestamp: Date.now(),
            userId: userId,
            userName: userName
        };

        messages.push(newMessage);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        if (messages.length > 1000) {
            messages = messages.slice(-500);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
        io.emit('chat_message', { message: newMessage });
    });

    socket.on('clear_chat', () => {
        console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞:', userName);
        messages = [];
        io.emit('chat_cleared');
    });

    // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–ò–î–ï–û–ó–í–û–ù–ö–û–í ====================

    socket.on('initiate_call', (data) => {
        console.log('üìû –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ –æ—Ç:', userName);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ
        socket.broadcast.emit('incoming_call', {
            from: userId,
            fromName: userName,
            callId: Date.now().toString()
        });
    });

    socket.on('accept_call', (data) => {
        console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç:', userName);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–≤–æ–Ω–∫–∞
        const targetSocket = findSocketByUserId(data.to);
        if (targetSocket) {
            io.to(targetSocket).emit('call_accepted', {
                from: userId,
                fromName: userName
            });
        }
    });

    socket.on('reject_call', (data) => {
        console.log('‚ùå –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω:', userName);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
        const targetSocket = findSocketByUserId(data.to);
        if (targetSocket) {
            io.to(targetSocket).emit('call_rejected', {
                from: userId,
                fromName: userName
            });
        }
    });

    socket.on('end_call', (data) => {
        console.log('üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω:', userName);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
        if (data.to === 'all') {
            socket.broadcast.emit('call_ended', {
                from: userId,
                fromName: userName
            });
        } else {
            const targetSocket = findSocketByUserId(data.to);
            if (targetSocket) {
                io.to(targetSocket).emit('call_ended', {
                    from: userId,
                    fromName: userName
                });
            }
        }
    });

    // ==================== WEBRTC –°–ò–ì–ù–ê–õ–ò–ó–ê–¶–ò–Ø ====================

    socket.on('offer', (data) => {
        console.log('üéØ Offer –æ—Ç:', userName);

        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º offer —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const targetSocket = findSocketByUserId(data.to);
        if (targetSocket) {
            io.to(targetSocket).emit('offer', {
                offer: data.offer,
                from: userId,
                fromName: userName
            });
        } else if (data.to === 'all') {
            // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            socket.broadcast.emit('offer', {
                offer: data.offer,
                from: userId,
                fromName: userName
            });
        }
    });

    socket.on('answer', (data) => {
        console.log('üéØ Answer –æ—Ç:', userName);

        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º answer —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const targetSocket = findSocketByUserId(data.to);
        if (targetSocket) {
            io.to(targetSocket).emit('answer', {
                answer: data.answer,
                from: userId,
                fromName: userName
            });
        }
    });

    socket.on('ice_candidate', (data) => {
        console.log('üßä ICE candidate –æ—Ç:', userName);

        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const targetSocket = findSocketByUserId(data.to);
        if (targetSocket) {
            io.to(targetSocket).emit('ice_candidate', {
                candidate: data.candidate,
                from: userId,
                fromName: userName
            });
        } else if (data.to === 'all') {
            // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            socket.broadcast.emit('ice_candidate', {
                candidate: data.candidate,
                from: userId,
                fromName: userName
            });
        }
    });

    // ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ====================

    socket.on('get_connected_users', () => {
        socket.emit('connected_users', {
            users: Array.from(connectedUsers.values())
        });
    });

    socket.on('disconnect', (reason) => {
        console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω:', socket.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userName, '–ü—Ä–∏—á–∏–Ω–∞:', reason);

        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
        connectedUsers.delete(socket.id);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        socket.broadcast.emit('user_disconnected', {
            userId: userId,
            userName: userName,
            connectedUsers: Array.from(connectedUsers.values())
        });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    socket.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞:', socket.id, error);
    });
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ socket.id –ø–æ userId
function findSocketByUserId(userId) {
    for (let [socketId, userData] of connectedUsers.entries()) {
        if (userData.id === userId) {
            return socketId;
        }
    }
    return null;
}

// –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
    const now = Date.now();
    let cleanedCount = 0;

    for (let [socketId, userData] of connectedUsers.entries()) {
        // –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
        if (now - userData.connectedAt.getTime() > 30 * 60 * 1000) {
            const socket = io.sockets.sockets.get(socketId);
            if (socket) {
                socket.disconnect(true);
                connectedUsers.delete(socketId);
                cleanedCount++;
            }
        }
    }

    if (cleanedCount > 0) {
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${cleanedCount}`);
    }
}, 5 * 60 * 1000);

const PORT = 3000;

// –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
server.listen(PORT, '0.0.0.0', () => {
    console.log(`üìç –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π URL: http://192.168.0.100:${PORT}`);
    console.log(`üåê –í–Ω–µ—à–Ω–∏–π URL: http://77.222.52.61:${PORT}`);
    console.log(`üîç Health check: http://localhost:${PORT}/health`);
    console.log('üéØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
    console.log('   ‚úì –ß–∞—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
    console.log('   ‚úì –í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ WebRTC');
    console.log('   ‚úì –°–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è WebRTC');
    console.log('   ‚úì –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('   ‚úì –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –ø–æ –∫–Ω–æ–ø–∫–µ');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
process.on('SIGINT', () => {
    console.log('üõë –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...');
    io.disconnectSockets();
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});

process.on('SIGTERM', () => {
    console.log('üõë –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...');
    io.disconnectSockets();
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});