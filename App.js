import React, { useState, useEffect, useRef } from 'react';
import {
    View,
    Text,
    TextInput,
    TouchableOpacity,
    FlatList,
    StyleSheet,
    KeyboardAvoidingView,
    Platform,
    Alert,
} from 'react-native';
import io from 'socket.io-client';
import {
    RTCPeerConnection,
    RTCSessionDescription,
    RTCIceCandidate,
    mediaDevices,
    RTCView,
} from 'react-native-webrtc';

// üîß –ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–ò –ê–î–†–ï–°–ê!
const EXTERNAL_IP = '77.222.52.61'; // –í–∞—à –≤–Ω–µ—à–Ω–∏–π IP
const INTERNAL_IP = '77.222.52.61';  // –í–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IP Ubuntu

const SERVER_URLS = [
    `http://${EXTERNAL_IP}:3000`,  // –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø
    `http://${INTERNAL_IP}:3000`,  // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø
];

const App = () => {
    const [messages, setMessages] = useState([]);
    const [inputText, setInputText] = useState('');
    const [socket, setSocket] = useState(null);
    const [isConnected, setIsConnected] = useState(false);
    const [currentUrl, setCurrentUrl] = useState('');
    const [connectionStatus, setConnectionStatus] = useState('–ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
    const [isInCall, setIsInCall] = useState(false);
    const [isCallActive, setIsCallActive] = useState(false);
    const [localStream, setLocalStream] = useState(null);
    const [remoteStream, setRemoteStream] = useState(null);
    const [callStatus, setCallStatus] = useState('');

    const flatListRef = useRef(null);
    const peerConnectionRef = useRef(null);

    useEffect(() => {
        connectToServer(0);

        return () => {
            if (socket) {
                socket.disconnect();
            }
            cleanupVideoCall();
        };
    }, []);

    const connectToServer = (urlIndex = 0) => {
        if (urlIndex >= SERVER_URLS.length) {
            console.log('‚ùå –í—Å–µ URL –ø–µ—Ä–µ–±—Ä–∞–Ω—ã');
            setConnectionStatus('–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            Alert.alert(
                '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
                '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞ Ubuntu\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Port Forwarding –≤ —Ä–æ—É—Ç–µ—Ä–µ\n‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å IP –∞–¥—Ä–µ—Å–æ–≤'
            );
            return;
        }

        const url = SERVER_URLS[urlIndex];
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${urlIndex + 1}/2: ${url}`);
        setCurrentUrl(url);
        setConnectionStatus(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${url}...`);

        const newSocket = io(url, {
            transports: ['polling', 'websocket'],
            timeout: 8000,
            forceNew: true,
            reconnection: false
        });

        newSocket.on('connect', () => {
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫:', url);
            setIsConnected(true);
            setConnectionStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ ‚úì');

            initializeVideoCallHandlers(newSocket);
        });

        newSocket.on('disconnect', (reason) => {
            console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ:', reason);
            setIsConnected(false);
            setConnectionStatus('–û—Ç–∫–ª—é—á–µ–Ω–æ: ' + reason);
            cleanupVideoCall();
        });

        newSocket.on('connect_error', (error) => {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${url}:`, error.message);
            setIsConnected(false);
            setConnectionStatus(`–û—à–∏–±–∫–∞: ${error.message}`);

            setTimeout(() => {
                console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π URL...');
                connectToServer(urlIndex + 1);
            }, 1000);
        });

        newSocket.on('message_history', (data) => {
            console.log('üìú –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', data.messages?.length || 0);
            setMessages(data.messages || []);
        });

        newSocket.on('chat_message', (data) => {
            console.log('üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.message.text);
            setMessages(prev => {
                const newMessages = [...prev, data.message];
                setTimeout(() => {
                    flatListRef.current?.scrollToEnd({ animated: true });
                }, 100);
                return newMessages;
            });
        });

        newSocket.on('chat_cleared', () => {
            console.log('üóëÔ∏è –ß–∞—Ç –æ—á–∏—â–µ–Ω');
            setMessages([]);
            Alert.alert('–ß–∞—Ç –æ—á–∏—â–µ–Ω', '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã');
        });

        setSocket(newSocket);

        setTimeout(() => {
            if (!newSocket.connected) {
                console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫', url);
                newSocket.disconnect();
            }
        }, 8000);
    };

    // ==================== –í–ò–î–ï–û–ó–í–û–ù–û–ö ====================

    const initializeVideoCallHandlers = (socket) => {
        socket.on('incoming_call', (data) => {
            console.log('üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç:', data.fromName);
            Alert.alert(
                '–í—Ö–æ–¥—è—â–∏–π –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫',
                `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.fromName} –∑–≤–æ–Ω–∏—Ç –≤–∞–º`,
                [
                    {
                        text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                        style: 'cancel',
                        onPress: () => {
                            socket.emit('reject_call', { to: data.from });
                        }
                    },
                    {
                        text: '–ü—Ä–∏–Ω—è—Ç—å',
                        onPress: () => {
                            acceptCall(data.from);
                        }
                    }
                ]
            );
        });

        socket.on('call_accepted', async (data) => {
            console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç');
            setCallStatus('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
            await startCall();
        });

        socket.on('call_rejected', (data) => {
            console.log('‚ùå –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
            setCallStatus('–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
            Alert.alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ó–≤–æ–Ω–æ–∫ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω');
            cleanupVideoCall();
        });

        socket.on('ice_candidate', async (data) => {
            if (peerConnectionRef.current && data.candidate) {
                try {
                    await peerConnectionRef.current.addIceCandidate(
                        new RTCIceCandidate(data.candidate)
                    );
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
                }
            }
        });

        socket.on('offer', async (data) => {
            if (peerConnectionRef.current) {
                try {
                    await peerConnectionRef.current.setRemoteDescription(
                        new RTCSessionDescription(data.offer)
                    );
                    const answer = await peerConnectionRef.current.createAnswer();
                    await peerConnectionRef.current.setLocalDescription(answer);

                    socket.emit('answer', {
                        answer: answer,
                        to: data.from
                    });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ offer:', error);
                }
            }
        });

        socket.on('answer', async (data) => {
            if (peerConnectionRef.current) {
                try {
                    await peerConnectionRef.current.setRemoteDescription(
                        new RTCSessionDescription(data.answer)
                    );
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ answer:', error);
                }
            }
        });

        socket.on('call_ended', (data) => {
            console.log('üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
            setCallStatus('–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
            Alert.alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –∑–≤–æ–Ω–æ–∫');
            cleanupVideoCall();
        });
    };

    const initializePeerConnection = () => {
        const configuration = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' }
            ]
        };

        const pc = new RTCPeerConnection(configuration);

        pc.oniceconnectionstatechange = () => {
            console.log('ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', pc.iceConnectionState);
            if (pc.iceConnectionState === 'connected' || pc.iceConnectionState === 'completed') {
                setCallStatus('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                setIsCallActive(true);
            } else if (pc.iceConnectionState === 'disconnected' || pc.iceConnectionState === 'failed') {
                setCallStatus('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
                setIsCallActive(false);
            }
        };

        pc.ontrack = (event) => {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫');
            setRemoteStream(event.streams[0]);
        };

        pc.onicecandidate = (event) => {
            if (event.candidate && socket) {
                socket.emit('ice_candidate', {
                    candidate: event.candidate,
                    to: 'all'
                });
            }
        };

        return pc;
    };

    const getLocalStream = async () => {
        try {
            console.log('üé• –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ...');
            const stream = await mediaDevices.getUserMedia({
                video: {
                    width: 640,
                    height: 480,
                    frameRate: 30,
                    facingMode: 'user',
                },
                audio: true,
            });
            console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω');
            return stream;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error);
            Alert.alert(
                '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞',
                '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.'
            );
            return null;
        }
    };

    const startCall = async () => {
        try {
            setIsInCall(true);
            setCallStatus('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...');

            const stream = await getLocalStream();
            if (!stream) {
                cleanupVideoCall();
                return;
            }

            setLocalStream(stream);
            peerConnectionRef.current = initializePeerConnection();

            // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ –≤ peer connection
            stream.getTracks().forEach(track => {
                peerConnectionRef.current.addTrack(track, stream);
            });

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            const offer = await peerConnectionRef.current.createOffer();
            await peerConnectionRef.current.setLocalDescription(offer);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
            if (socket) {
                socket.emit('offer', {
                    offer,
                    to: 'all'
                });
            }

            setCallStatus('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞:', error);
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫');
            cleanupVideoCall();
        }
    };

    const acceptCall = async (from) => {
        console.log('‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç:', from);
        await startCall();
    };

    const initiateVideoCall = () => {
        if (!isConnected) {
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            return;
        }

        Alert.alert(
            '–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫',
            '–ù–∞—á–∞—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ —Å–æ –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —á–∞—Ç–∞?',
            [
                { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
                {
                    text: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å',
                    onPress: () => {
                        if (socket) {
                            socket.emit('initiate_call', { to: 'all' });
                            startCall();
                        }
                    }
                }
            ]
        );
    };

    const endCall = () => {
        if (socket) {
            socket.emit('end_call', { to: 'all' });
        }
        cleanupVideoCall();
        Alert.alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
    };

    const cleanupVideoCall = () => {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞');

        if (localStream) {
            localStream.getTracks().forEach(track => {
                track.stop();
            });
            setLocalStream(null);
        }

        if (peerConnectionRef.current) {
            peerConnectionRef.current.close();
            peerConnectionRef.current = null;
        }

        setRemoteStream(null);
        setIsInCall(false);
        setIsCallActive(false);
        setCallStatus('');
    };

    const sendMessage = () => {
        if (inputText.trim() === '') return;

        if (!isConnected || !socket) {
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            return;
        }

        const messageData = {
            text: inputText.trim()
        };

        socket.emit('chat_message', messageData);
        setInputText('');
    };

    const clearChat = () => {
        Alert.alert(
            '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é',
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è?',
            [
                { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
                {
                    text: '–û—á–∏—Å—Ç–∏—Ç—å',
                    style: 'destructive',
                    onPress: () => {
                        if (socket && isConnected) {
                            socket.emit('clear_chat');
                        }
                    },
                },
            ]
        );
    };

    const retryConnection = () => {
        console.log('üîÑ –†—É—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
        if (socket) {
            socket.disconnect();
        }
        setIsConnected(false);
        setConnectionStatus('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        setMessages([]);
        cleanupVideoCall();

        setTimeout(() => {
            connectToServer(0);
        }, 500);
    };

    const formatTime = (timestamp) => {
        const date = new Date(timestamp);
        return date.toLocaleTimeString([], {
            hour: '2-digit', minute: '2-digit'
        });
    };

    const renderMessage = ({ item }) => {
        const isUser = item.userId && socket && item.userId.includes(socket.id);

        return (
            <View style={[
                styles.messageContainer,
                isUser ? styles.userContainer : styles.otherContainer
            ]}>
                {!isUser && (
                    <View style={styles.avatar}>
                        <Text style={styles.avatarText}>
                            {item.userName ? item.userName.charAt(0) : 'U'}
                        </Text>
                    </View>
                )}

                <View style={[
                    styles.messageBubble,
                    isUser ? styles.userBubble : styles.otherBubble
                ]}>
                    {!isUser && (
                        <Text style={styles.userNameText}>
                            {item.userName || '–î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                        </Text>
                    )}
                    <Text style={styles.messageText}>
                        {item.text}
                    </Text>
                    <Text style={styles.timestamp}>
                        {formatTime(item.timestamp)}
                    </Text>
                </View>

                {isUser && (
                    <View style={[styles.avatar, styles.userAvatar]}>
                        <Text style={styles.avatarText}>–Ø</Text>
                    </View>
                )}
            </View>
        );
    };

    return (
        <KeyboardAvoidingView
            style={styles.container}
            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
            keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 0}
        >
            {/* Header */}
            <View style={styles.header}>
                <View style={styles.contactInfo}>
                    <Text style={styles.contactName}>üåê Ubuntu –ß–∞—Ç + –í–∏–¥–µ–æ</Text>
                    <Text style={[styles.contactStatus,
                        { color: isConnected ? '#4CAF50' : '#FF3B30' }]}>
                        {connectionStatus}
                    </Text>
                    <Text style={styles.serverInfo}>
                        {currentUrl}
                    </Text>
                </View>
                <View style={styles.headerButtons}>
                    {/* –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ */}
                    {isConnected && (
                        <TouchableOpacity onPress={initiateVideoCall} style={styles.videoCallButton}>
                            <Text style={styles.videoCallButtonText}>üìπ</Text>
                        </TouchableOpacity>
                    )}
                    <TouchableOpacity onPress={retryConnection} style={styles.retryButton}>
                        <Text style={styles.retryButtonText}>‚ü≥</Text>
                    </TouchableOpacity>
                    <TouchableOpacity onPress={clearChat}>
                        <Text style={styles.headerButton}>üóëÔ∏è</Text>
                    </TouchableOpacity>
                </View>
            </View>

            {/* –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ */}
            {isInCall && (
                <View style={styles.videoCallContainer}>
                    <View style={styles.videoHeader}>
                        <Text style={styles.videoHeaderText}>
                            üìπ –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ {callStatus && `- ${callStatus}`}
                        </Text>
                        <TouchableOpacity onPress={endCall} style={styles.endCallButton}>
                            <Text style={styles.endCallButtonText}>üìû</Text>
                        </TouchableOpacity>
                    </View>

                    <View style={styles.videoGrid}>
                        {/* –£–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ */}
                        {remoteStream ? (
                            <RTCView
                                streamURL={remoteStream.toURL()}
                                style={styles.remoteVideo}
                                objectFit={'cover'}
                            />
                        ) : (
                            <View style={styles.videoPlaceholder}>
                                <Text style={styles.videoPlaceholderText}>
                                    –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...
                                </Text>
                            </View>
                        )}

                        {/* –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ (picture-in-picture) */}
                        {localStream && (
                            <RTCView
                                streamURL={localStream.toURL()}
                                style={styles.localVideo}
                                objectFit={'cover'}
                                mirror={true}
                            />
                        )}
                    </View>
                </View>
            )}

            {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
            {!isInCall && (
                <FlatList
                    ref={flatListRef}
                    data={messages}
                    renderItem={renderMessage}
                    keyExtractor={(item) => item.id}
                    style={styles.messagesList}
                    contentContainerStyle={styles.messagesContent}
                    onContentSizeChange={() => flatListRef.current?.scrollToEnd()}
                    ListEmptyComponent={
                        <View style={styles.emptyContainer}>
                            <Text style={styles.emptyText}>
                                {isConnected ? '–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç' : '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'}
                            </Text>
                            <Text style={styles.emptySubText}>
                                {isConnected
                                    ? '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!'
                                    : '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ –∏ —Å–µ—Ä–≤–µ—Ä'
                                }
                            </Text>
                            {!isConnected && (
                                <TouchableOpacity onPress={retryConnection} style={styles.retryButtonBig}>
                                    <Text style={styles.retryButtonBigText}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</Text>
                                </TouchableOpacity>
                            )}
                        </View>
                    }
                    showsVerticalScrollIndicator={false}
                />
            )}

            {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
            {!isInCall && (
                <View style={styles.inputContainer}>
                    <TextInput
                        style={[
                            styles.textInput,
                            !isConnected && styles.disabledInput
                        ]}
                        value={inputText}
                        onChangeText={setInputText}
                        placeholder={isConnected ? "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." : "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."}
                        placeholderTextColor="#8E8E93"
                        multiline
                        maxLength={500}
                        onSubmitEditing={sendMessage}
                        returnKeyType="send"
                        editable={isConnected}
                    />
                    <TouchableOpacity
                        style={[
                            styles.sendButton,
                            !isConnected && styles.disabledButton
                        ]}
                        onPress={sendMessage}
                        disabled={!isConnected}
                    >
                        <Text style={styles.sendButtonText}>‚û§</Text>
                    </TouchableOpacity>
                </View>
            )}
        </KeyboardAvoidingView>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#0E1621',
    },
    header: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingHorizontal: 16,
        paddingTop: Platform.OS === 'ios' ? 50 : 10,
        paddingBottom: 10,
        backgroundColor: '#1E2C3A',
        borderBottomWidth: 1,
        borderBottomColor: '#16202B',
    },
    contactInfo: {
        flexDirection: 'column',
        flex: 1,
    },
    contactName: {
        color: 'white',
        fontSize: 16,
        fontWeight: 'bold',
    },
    contactStatus: {
        fontSize: 12,
        marginTop: 2,
    },
    serverInfo: {
        color: '#8E8E93',
        fontSize: 10,
        marginTop: 2,
    },
    headerButtons: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    videoCallButton: {
        marginRight: 10,
        padding: 5,
    },
    videoCallButtonText: {
        color: '#2F89FC',
        fontSize: 18,
    },
    retryButton: {
        marginRight: 15,
        padding: 5,
    },
    retryButtonText: {
        color: '#2F89FC',
        fontSize: 18,
        fontWeight: 'bold',
    },
    headerButton: {
        color: '#FF3B30',
        fontSize: 18,
        fontWeight: 'bold',
    },
    // –°—Ç–∏–ª–∏ –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
    videoCallContainer: {
        flex: 1,
        backgroundColor: '#000',
    },
    videoHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: 16,
        backgroundColor: '#1E2C3A',
    },
    videoHeaderText: {
        color: 'white',
        fontSize: 16,
        fontWeight: 'bold',
    },
    endCallButton: {
        backgroundColor: '#FF3B30',
        width: 40,
        height: 40,
        borderRadius: 20,
        justifyContent: 'center',
        alignItems: 'center',
    },
    endCallButtonText: {
        color: 'white',
        fontSize: 16,
    },
    videoGrid: {
        flex: 1,
        position: 'relative',
    },
    remoteVideo: {
        width: '100%',
        height: '100%',
        backgroundColor: '#000',
    },
    localVideo: {
        position: 'absolute',
        bottom: 20,
        right: 20,
        width: 120,
        height: 160,
        backgroundColor: '#000',
        borderRadius: 8,
        borderWidth: 2,
        borderColor: '#2F89FC',
    },
    videoPlaceholder: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#000',
    },
    videoPlaceholderText: {
        color: 'white',
        fontSize: 16,
    },
    messagesList: {
        flex: 1,
        backgroundColor: '#0E1621',
    },
    messagesContent: {
        paddingHorizontal: 8,
        paddingVertical: 16,
        flexGrow: 1,
    },
    messageContainer: {
        flexDirection: 'row',
        alignItems: 'flex-end',
        marginVertical: 4,
        paddingHorizontal: 8,
    },
    userContainer: {
        justifyContent: 'flex-end',
    },
    otherContainer: {
        justifyContent: 'flex-start',
    },
    messageBubble: {
        maxWidth: '70%',
        paddingHorizontal: 12,
        paddingVertical: 8,
        borderRadius: 18,
        marginHorizontal: 4,
    },
    userBubble: {
        backgroundColor: '#2B5278',
        borderBottomRightRadius: 4,
    },
    otherBubble: {
        backgroundColor: '#182533',
        borderBottomLeftRadius: 4,
    },
    messageText: {
        color: 'white',
        fontSize: 16,
        lineHeight: 20,
    },
    userNameText: {
        color: '#2F89FC',
        fontSize: 12,
        fontWeight: 'bold',
        marginBottom: 2,
    },
    timestamp: {
        fontSize: 11,
        color: 'rgba(255,255,255,0.5)',
        marginTop: 2,
        alignSelf: 'flex-end',
    },
    avatar: {
        width: 36,
        height: 36,
        borderRadius: 18,
        backgroundColor: '#2F89FC',
        justifyContent: 'center',
        alignItems: 'center',
        marginHorizontal: 4,
    },
    userAvatar: {
        backgroundColor: '#2B5278',
    },
    avatarText: {
        color: 'white',
        fontSize: 14,
        fontWeight: 'bold',
    },
    inputContainer: {
        flexDirection: 'row',
        alignItems: 'flex-end',
        paddingHorizontal: 12,
        paddingVertical: 8,
        backgroundColor: '#1E2C3A',
        borderTopWidth: 1,
        borderTopColor: '#16202B',
    },
    textInput: {
        flex: 1,
        backgroundColor: '#1E2C3A',
        borderWidth: 1,
        borderColor: '#2F89FC',
        borderRadius: 20,
        paddingHorizontal: 16,
        paddingVertical: 10,
        maxHeight: 100,
        fontSize: 16,
        color: 'white',
        marginHorizontal: 8,
    },
    disabledInput: {
        borderColor: '#666',
        color: '#666',
    },
    sendButton: {
        width: 36,
        height: 36,
        borderRadius: 18,
        backgroundColor: '#2F89FC',
        justifyContent: 'center',
        alignItems: 'center',
    },
    disabledButton: {
        backgroundColor: '#666',
    },
    sendButtonText: {
        color: 'white',
        fontSize: 16,
        fontWeight: 'bold',
    },
    emptyContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        paddingHorizontal: 40,
    },
    emptyText: {
        color: 'white',
        fontSize: 18,
        fontWeight: 'bold',
        textAlign: 'center',
        marginBottom: 8,
    },
    emptySubText: {
        color: '#8E8E93',
        fontSize: 14,
        textAlign: 'center',
        lineHeight: 20,
        marginBottom: 20,
    },
    retryButtonBig: {
        backgroundColor: '#2F89FC',
        paddingHorizontal: 20,
        paddingVertical: 10,
        borderRadius: 20,
    },
    retryButtonBigText: {
        color: 'white',
        fontSize: 16,
        fontWeight: 'bold',
    },
});

export default App;